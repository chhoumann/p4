//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Mapper/Tools/Dev/Projects/p4/Code/Interpreter/Interpreter/Antlr\Dazel.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IDazelListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class DazelBaseListener : IDazelListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] DazelParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] DazelParser.StartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.game_object"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGame_object([NotNull] DazelParser.Game_objectContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.game_object"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGame_object([NotNull] DazelParser.Game_objectContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.empty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmpty([NotNull] DazelParser.EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.empty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmpty([NotNull] DazelParser.EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.game_object_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGame_object_type([NotNull] DazelParser.Game_object_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.game_object_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGame_object_type([NotNull] DazelParser.Game_object_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.game_object_contents"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGame_object_contents([NotNull] DazelParser.Game_object_contentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.game_object_contents"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGame_object_contents([NotNull] DazelParser.Game_object_contentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.game_object_content"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGame_object_content([NotNull] DazelParser.Game_object_contentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.game_object_content"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGame_object_content([NotNull] DazelParser.Game_object_contentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.content_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContent_type([NotNull] DazelParser.Content_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.content_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContent_type([NotNull] DazelParser.Content_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.statement_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement_list([NotNull] DazelParser.Statement_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.statement_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement_list([NotNull] DazelParser.Statement_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] DazelParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] DazelParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.repeat_loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeat_loop([NotNull] DazelParser.Repeat_loopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.repeat_loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeat_loop([NotNull] DazelParser.Repeat_loopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.if_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_statement([NotNull] DazelParser.If_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.if_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_statement([NotNull] DazelParser.If_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] DazelParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] DazelParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] DazelParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] DazelParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.sum_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSum_expression([NotNull] DazelParser.Sum_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.sum_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSum_expression([NotNull] DazelParser.Sum_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.factor_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor_expression([NotNull] DazelParser.Factor_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.factor_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor_expression([NotNull] DazelParser.Factor_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.terminal_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerminal_expression([NotNull] DazelParser.Terminal_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.terminal_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerminal_expression([NotNull] DazelParser.Terminal_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.sum_operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSum_operation([NotNull] DazelParser.Sum_operationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.sum_operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSum_operation([NotNull] DazelParser.Sum_operationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.factor_operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor_operation([NotNull] DazelParser.Factor_operationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.factor_operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor_operation([NotNull] DazelParser.Factor_operationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.function_invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_invocation([NotNull] DazelParser.Function_invocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.function_invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_invocation([NotNull] DazelParser.Function_invocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.member_access"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_access([NotNull] DazelParser.Member_accessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.member_access"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_access([NotNull] DazelParser.Member_accessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.value_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue_list([NotNull] DazelParser.Value_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.value_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue_list([NotNull] DazelParser.Value_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue([NotNull] DazelParser.ValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue([NotNull] DazelParser.ValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DazelParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray([NotNull] DazelParser.ArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DazelParser.array"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray([NotNull] DazelParser.ArrayContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
