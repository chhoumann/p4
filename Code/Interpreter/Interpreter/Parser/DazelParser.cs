//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Mapper/Tools/Dev/Projects/p4/Code/Interpreter/Interpreter/Antlr\Dazel.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class DazelParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, WS=6, COMMENT=7, SCREEN=8, ENTITY=9, 
		MOVE_PATTERN=10, MAP=11, ONSCREENENTERED=12, ENTITIES=13, EXITS=14, DATA=15, 
		PATTERN=16, IDENTIFIER=17, INT=18, FLOAT=19, L_PARANTHESIS=20, R_PARANTHESIS=21, 
		L_BRACKET=22, R_BRACKET=23, L_BRACES=24, R_BRACES=25, ASSIGN_OP=26, LESSTHAN_OP=27, 
		GREATERTHAN_OP=28, PLUS_OP=29, MINUS_OP=30, MULTIPLICATION_OP=31, DIVISION_OP=32, 
		QUOTATION_MARK=33;
	public const int
		RULE_start = 0, RULE_gameObject = 1, RULE_gameObjectBlock = 2, RULE_empty = 3, 
		RULE_gameObjectContents = 4, RULE_gameObjectContent = 5, RULE_statementList = 6, 
		RULE_statementBlock = 7, RULE_statement = 8, RULE_repeatLoop = 9, RULE_ifStatement = 10, 
		RULE_statementExpression = 11, RULE_assignment = 12, RULE_expression = 13, 
		RULE_sumExpression = 14, RULE_factorExpression = 15, RULE_terminalExpression = 16, 
		RULE_sumOperation = 17, RULE_factorOperation = 18, RULE_functionInvocation = 19, 
		RULE_memberAccess = 20, RULE_valueList = 21, RULE_value = 22, RULE_array = 23;
	public static readonly string[] ruleNames = {
		"start", "gameObject", "gameObjectBlock", "empty", "gameObjectContents", 
		"gameObjectContent", "statementList", "statementBlock", "statement", "repeatLoop", 
		"ifStatement", "statementExpression", "assignment", "expression", "sumExpression", 
		"factorExpression", "terminalExpression", "sumOperation", "factorOperation", 
		"functionInvocation", "memberAccess", "valueList", "value", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'repeat'", "'if'", "'.'", "','", null, null, "'Screen'", 
		"'Entity'", "'MovePattern'", "'Map'", "'OnScreenEntered'", "'Entities'", 
		"'Exits'", "'Data'", "'Pattern'", null, null, null, "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'='", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", 
		"'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "WS", "COMMENT", "SCREEN", "ENTITY", 
		"MOVE_PATTERN", "MAP", "ONSCREENENTERED", "ENTITIES", "EXITS", "DATA", 
		"PATTERN", "IDENTIFIER", "INT", "FLOAT", "L_PARANTHESIS", "R_PARANTHESIS", 
		"L_BRACKET", "R_BRACKET", "L_BRACES", "R_BRACES", "ASSIGN_OP", "LESSTHAN_OP", 
		"GREATERTHAN_OP", "PLUS_OP", "MINUS_OP", "MULTIPLICATION_OP", "DIVISION_OP", 
		"QUOTATION_MARK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dazel.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DazelParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DazelParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DazelParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GameObjectContext gameObject() {
			return GetRuleContext<GameObjectContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			gameObject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameObjectContext : ParserRuleContext {
		public IToken gameObjectType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GameObjectBlockContext gameObjectBlock() {
			return GetRuleContext<GameObjectBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCREEN() { return GetToken(DazelParser.SCREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(DazelParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_PATTERN() { return GetToken(DazelParser.MOVE_PATTERN, 0); }
		public GameObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGameObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGameObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameObjectContext gameObject() {
		GameObjectContext _localctx = new GameObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_gameObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_localctx.gameObjectType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCREEN) | (1L << ENTITY) | (1L << MOVE_PATTERN))) != 0)) ) {
				_localctx.gameObjectType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 51;
			Match(IDENTIFIER);
			State = 52;
			gameObjectBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameObjectBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GameObjectContentsContext gameObjectContents() {
			return GetRuleContext<GameObjectContentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public GameObjectBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameObjectBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGameObjectBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGameObjectBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameObjectBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameObjectBlockContext gameObjectBlock() {
		GameObjectBlockContext _localctx = new GameObjectBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_gameObjectBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(L_BRACES);
			State = 55;
			gameObjectContents();
			State = 56;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyContext : ParserRuleContext {
		public EmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyContext empty() {
		EmptyContext _localctx = new EmptyContext(Context, State);
		EnterRule(_localctx, 6, RULE_empty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameObjectContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GameObjectContentContext gameObjectContent() {
			return GetRuleContext<GameObjectContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GameObjectContentsContext gameObjectContents() {
			return GetRuleContext<GameObjectContentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext empty() {
			return GetRuleContext<EmptyContext>(0);
		}
		public GameObjectContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameObjectContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGameObjectContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGameObjectContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameObjectContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameObjectContentsContext gameObjectContents() {
		GameObjectContentsContext _localctx = new GameObjectContentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_gameObjectContents);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				gameObjectContent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				gameObjectContent();
				State = 62;
				gameObjectContents();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64;
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameObjectContentContext : ParserRuleContext {
		public IToken gameObjectContentType;
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(DazelParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONSCREENENTERED() { return GetToken(DazelParser.ONSCREENENTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITIES() { return GetToken(DazelParser.ENTITIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXITS() { return GetToken(DazelParser.EXITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(DazelParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(DazelParser.PATTERN, 0); }
		public GameObjectContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameObjectContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGameObjectContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGameObjectContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameObjectContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameObjectContentContext gameObjectContent() {
		GameObjectContentContext _localctx = new GameObjectContentContext(Context, State);
		EnterRule(_localctx, 10, RULE_gameObjectContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_localctx.gameObjectContentType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAP) | (1L << ONSCREENENTERED) | (1L << ENTITIES) | (1L << EXITS) | (1L << DATA) | (1L << PATTERN))) != 0)) ) {
				_localctx.gameObjectContentType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 68;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext empty() {
			return GetRuleContext<EmptyContext>(0);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 12, RULE_statementList);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				statement();
				State = 71;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				statement();
				State = 74;
				Match(T__0);
				State = 75;
				statementList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				statementBlock();
				State = 78;
				statementList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80;
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_statementBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(L_BRACES);
			State = 84;
			statementList();
			State = 85;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepeatLoopContext repeatLoop() {
			return GetRuleContext<RepeatLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				repeatLoop();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				ifStatement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				statementExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public RepeatLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterRepeatLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitRepeatLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatLoopContext repeatLoop() {
		RepeatLoopContext _localctx = new RepeatLoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_repeatLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(T__1);
			State = 93;
			Match(L_BRACES);
			State = 94;
			statementList();
			State = 95;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__2);
			State = 98;
			expression();
			State = 99;
			Match(L_BRACES);
			State = 100;
			statementList();
			State = 101;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementExpression);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				functionInvocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP() { return GetToken(DazelParser.ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(IDENTIFIER);
			State = 108;
			Match(ASSIGN_OP);
			State = 109;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			sumExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorExpressionContext factorExpression() {
			return GetRuleContext<FactorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumOperationContext sumOperation() {
			return GetRuleContext<SumOperationContext>(0);
		}
		public SumExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumExpressionContext sumExpression() {
		return sumExpression(0);
	}

	private SumExpressionContext sumExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumExpressionContext _localctx = new SumExpressionContext(Context, _parentState);
		SumExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_sumExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 114;
			factorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sumExpression);
					State = 116;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 117;
					sumOperation();
					State = 118;
					factorExpression(0);
					}
					} 
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalExpressionContext terminalExpression() {
			return GetRuleContext<TerminalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorExpressionContext factorExpression() {
			return GetRuleContext<FactorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorOperationContext factorOperation() {
			return GetRuleContext<FactorOperationContext>(0);
		}
		public FactorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterFactorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitFactorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorExpressionContext factorExpression() {
		return factorExpression(0);
	}

	private FactorExpressionContext factorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FactorExpressionContext _localctx = new FactorExpressionContext(Context, _parentState);
		FactorExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_factorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 126;
			terminalExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factorExpression);
					State = 128;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 129;
					factorOperation();
					State = 130;
					terminalExpression();
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TerminalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PARANTHESIS() { return GetToken(DazelParser.L_PARANTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PARANTHESIS() { return GetToken(DazelParser.R_PARANTHESIS, 0); }
		public TerminalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterTerminalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitTerminalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalExpressionContext terminalExpression() {
		TerminalExpressionContext _localctx = new TerminalExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_terminalExpression);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case INT:
			case FLOAT:
			case L_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				value();
				}
				break;
			case L_PARANTHESIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				Match(L_PARANTHESIS);
				State = 139;
				expression();
				State = 140;
				Match(R_PARANTHESIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OP() { return GetToken(DazelParser.PLUS_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OP() { return GetToken(DazelParser.MINUS_OP, 0); }
		public SumOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterSumOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitSumOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumOperationContext sumOperation() {
		SumOperationContext _localctx = new SumOperationContext(Context, State);
		EnterRule(_localctx, 34, RULE_sumOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_OP || _la==MINUS_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATION_OP() { return GetToken(DazelParser.MULTIPLICATION_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION_OP() { return GetToken(DazelParser.DIVISION_OP, 0); }
		public FactorOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterFactorOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitFactorOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorOperationContext factorOperation() {
		FactorOperationContext _localctx = new FactorOperationContext(Context, State);
		EnterRule(_localctx, 36, RULE_factorOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = TokenStream.LA(1);
			if ( !(_la==MULTIPLICATION_OP || _la==DIVISION_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PARANTHESIS() { return GetToken(DazelParser.L_PARANTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PARANTHESIS() { return GetToken(DazelParser.R_PARANTHESIS, 0); }
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(IDENTIFIER);
			State = 149;
			Match(L_PARANTHESIS);
			State = 150;
			valueList();
			State = 151;
			Match(R_PARANTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(DazelParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DazelParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCREEN() { return GetToken(DazelParser.SCREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(DazelParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_PATTERN() { return GetToken(DazelParser.MOVE_PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(DazelParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONSCREENENTERED() { return GetToken(DazelParser.ONSCREENENTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITIES() { return GetToken(DazelParser.ENTITIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXITS() { return GetToken(DazelParser.EXITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(DazelParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(DazelParser.PATTERN, 0); }
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 40, RULE_memberAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(IDENTIFIER);
			State = 154;
			Match(T__3);
			State = 155;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCREEN) | (1L << ENTITY) | (1L << MOVE_PATTERN) | (1L << MAP) | (1L << ONSCREENENTERED) | (1L << ENTITIES) | (1L << EXITS) | (1L << DATA) | (1L << PATTERN))) != 0)) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 156;
			Match(T__3);
			State = 157;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext empty() {
			return GetRuleContext<EmptyContext>(0);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 42, RULE_valueList);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				value();
				State = 161;
				Match(T__4);
				State = 162;
				valueList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public IToken terminalValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(DazelParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(DazelParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_value);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				_localctx.terminalValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) ) {
					_localctx.terminalValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				array();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				memberAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				functionInvocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(DazelParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(DazelParser.R_BRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 46, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(L_BRACKET);
			State = 174;
			valueList();
			State = 175;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return sumExpression_sempred((SumExpressionContext)_localctx, predIndex);
		case 15: return factorExpression_sempred((FactorExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sumExpression_sempred(SumExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool factorExpression_sempred(FactorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\xB4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x44', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'T', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', ']', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', 'l', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '{', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '~', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x87', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x8A', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x91', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xA8', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\xAE', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x2', '\x4', '\x1E', ' ', 
		'\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x2', '\b', '\x3', '\x2', '\n', '\f', '\x3', '\x2', 
		'\r', '\x12', '\x3', '\x2', '\x1F', ' ', '\x3', '\x2', '!', '\"', '\x3', 
		'\x2', '\n', '\x12', '\x3', '\x2', '\x13', '\x15', '\x2', '\xAB', '\x2', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x4', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x38', '\x3', '\x2', '\x2', '\x2', '\b', '<', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x43', '\x3', '\x2', '\x2', '\x2', '\f', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'S', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x12', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '^', '\x3', '\x2', '\x2', '\x2', '\x16', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'k', '\x3', '\x2', '\x2', '\x2', '\x1A', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', 'q', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		's', '\x3', '\x2', '\x2', '\x2', ' ', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x90', '\x3', '\x2', '\x2', '\x2', '$', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x94', '\x3', '\x2', '\x2', '\x2', '(', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x9B', '\x3', '\x2', '\x2', '\x2', ',', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\x4', '\x3', 
		'\x2', '\x33', '\x3', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\t', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x13', '\x2', '\x2', '\x36', 
		'\x37', '\x5', '\x6', '\x4', '\x2', '\x37', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x1A', '\x2', '\x2', '\x39', ':', '\x5', 
		'\n', '\x6', '\x2', ':', ';', '\a', '\x1B', '\x2', '\x2', ';', '\a', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\t', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x44', '\x5', '\f', '\a', '\x2', '?', 
		'@', '\x5', '\f', '\a', '\x2', '@', '\x41', '\x5', '\n', '\x6', '\x2', 
		'\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x5', '\b', 
		'\x5', '\x2', '\x43', '>', '\x3', '\x2', '\x2', '\x2', '\x43', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\t', '\x3', '\x2', 
		'\x2', '\x46', 'G', '\x5', '\x10', '\t', '\x2', 'G', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x5', '\x12', '\n', '\x2', 'I', 'J', '\a', '\x3', 
		'\x2', '\x2', 'J', 'T', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', '\x12', 
		'\n', '\x2', 'L', 'M', '\a', '\x3', '\x2', '\x2', 'M', 'N', '\x5', '\xE', 
		'\b', '\x2', 'N', 'T', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x5', '\x10', 
		'\t', '\x2', 'P', 'Q', '\x5', '\xE', '\b', '\x2', 'Q', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'T', '\x5', '\b', '\x5', '\x2', 'S', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'K', '\x3', '\x2', '\x2', '\x2', 'S', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\a', '\x1A', '\x2', '\x2', 'V', 'W', '\x5', 
		'\xE', '\b', '\x2', 'W', 'X', '\a', '\x1B', '\x2', '\x2', 'X', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'Y', ']', '\x5', '\x14', '\v', '\x2', 'Z', 
		']', '\x5', '\x16', '\f', '\x2', '[', ']', '\x5', '\x18', '\r', '\x2', 
		'\\', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', '\x4', '\x2', '\x2', '_', '`', '\a', '\x1A', 
		'\x2', '\x2', '`', '\x61', '\x5', '\xE', '\b', '\x2', '\x61', '\x62', 
		'\a', '\x1B', '\x2', '\x2', '\x62', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\x5', '\x2', '\x2', '\x64', '\x65', '\x5', '\x1C', 
		'\xF', '\x2', '\x65', '\x66', '\a', '\x1A', '\x2', '\x2', '\x66', 'g', 
		'\x5', '\xE', '\b', '\x2', 'g', 'h', '\a', '\x1B', '\x2', '\x2', 'h', 
		'\x17', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x5', '\x1A', '\xE', '\x2', 
		'j', 'l', '\x5', '(', '\x15', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', '\x19', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\x13', '\x2', '\x2', 'n', 'o', '\a', '\x1C', '\x2', 
		'\x2', 'o', 'p', '\x5', '\x1C', '\xF', '\x2', 'p', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\x5', '\x1E', '\x10', '\x2', 'r', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\b', '\x10', '\x1', '\x2', 't', 'u', '\x5', 
		' ', '\x11', '\x2', 'u', '|', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\f', 
		'\x4', '\x2', '\x2', 'w', 'x', '\x5', '$', '\x13', '\x2', 'x', 'y', '\x5', 
		' ', '\x11', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'v', '\x3', 
		'\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\b', '\x11', '\x1', '\x2', '\x80', '\x81', '\x5', '\"', '\x12', 
		'\x2', '\x81', '\x88', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\f', 
		'\x4', '\x2', '\x2', '\x83', '\x84', '\x5', '&', '\x14', '\x2', '\x84', 
		'\x85', '\x5', '\"', '\x12', '\x2', '\x85', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x82', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x91', '\x5', 
		'.', '\x18', '\x2', '\x8C', '\x8D', '\a', '\x16', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\x1C', '\xF', '\x2', '\x8E', '\x8F', '\a', '\x17', '\x2', 
		'\x2', '\x8F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\t', '\x4', '\x2', '\x2', 
		'\x93', '%', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\t', '\x5', 
		'\x2', '\x2', '\x95', '\'', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\a', '\x13', '\x2', '\x2', '\x97', '\x98', '\a', '\x16', '\x2', '\x2', 
		'\x98', '\x99', '\x5', ',', '\x17', '\x2', '\x99', '\x9A', '\a', '\x17', 
		'\x2', '\x2', '\x9A', ')', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\a', '\x13', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x6', '\x2', '\x2', 
		'\x9D', '\x9E', '\t', '\x6', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x6', 
		'\x2', '\x2', '\x9F', '\xA0', '\a', '\x13', '\x2', '\x2', '\xA0', '+', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA8', '\x5', '.', '\x18', '\x2', 
		'\xA2', '\xA3', '\x5', '.', '\x18', '\x2', '\xA3', '\xA4', '\a', '\a', 
		'\x2', '\x2', '\xA4', '\xA5', '\x5', ',', '\x17', '\x2', '\xA5', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\x5', '\b', '\x5', '\x2', 
		'\xA7', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAE', '\t', '\a', '\x2', '\x2', 
		'\xAA', '\xAE', '\x5', '\x30', '\x19', '\x2', '\xAB', '\xAE', '\x5', '*', 
		'\x16', '\x2', '\xAC', '\xAE', '\x5', '(', '\x15', '\x2', '\xAD', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '/', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\a', '\x18', '\x2', '\x2', '\xB0', '\xB1', '\x5', ',', '\x17', '\x2', 
		'\xB1', '\xB2', '\a', '\x19', '\x2', '\x2', '\xB2', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x43', 'S', '\\', 'k', '|', '\x88', '\x90', '\xA7', 
		'\xAD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
