//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Dazel.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DazelParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, WS=15, IDENTIFIER=16, 
		INT=17, FLOAT=18, L_PARANTHESIS=19, R_PARANTHESIS=20, L_BRACKET=21, R_BRACKET=22, 
		L_BRACES=23, R_BRACES=24, ASSIGN_OP=25, LESSTHAN_OP=26, GREATERTHAN_OP=27, 
		PLUS_OP=28, MINUS_OP=29, MULTIPLICATION_OP=30, DIVISION_OP=31, QUOTATION_MARK=32;
	public const int
		RULE_start = 0, RULE_game_object = 1, RULE_empty = 2, RULE_game_object_type = 3, 
		RULE_game_object_contents = 4, RULE_game_object_content = 5, RULE_content_type = 6, 
		RULE_statement_list = 7, RULE_statement = 8, RULE_repeat_loop = 9, RULE_if_statement = 10, 
		RULE_assignment = 11, RULE_expression = 12, RULE_sum_expression = 13, 
		RULE_factor_expression = 14, RULE_terminal_expression = 15, RULE_sum_operation = 16, 
		RULE_factor_operation = 17, RULE_function_invocation = 18, RULE_member_access = 19, 
		RULE_value_list = 20, RULE_value = 21, RULE_array = 22;
	public static readonly string[] ruleNames = {
		"start", "game_object", "empty", "game_object_type", "game_object_contents", 
		"game_object_content", "content_type", "statement_list", "statement", 
		"repeat_loop", "if_statement", "assignment", "expression", "sum_expression", 
		"factor_expression", "terminal_expression", "sum_operation", "factor_operation", 
		"function_invocation", "member_access", "value_list", "value", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Screen '", "'Entity '", "'MovePattern'", "'Map'", "'OnScreenEntered'", 
		"'Entities'", "'Exits'", "'Data'", "'Pattern'", "';'", "'repeat'", "'if'", 
		"'.'", "','", null, null, null, null, "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'='", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WS", "IDENTIFIER", "INT", "FLOAT", "L_PARANTHESIS", 
		"R_PARANTHESIS", "L_BRACKET", "R_BRACKET", "L_BRACES", "R_BRACES", "ASSIGN_OP", 
		"LESSTHAN_OP", "GREATERTHAN_OP", "PLUS_OP", "MINUS_OP", "MULTIPLICATION_OP", 
		"DIVISION_OP", "QUOTATION_MARK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dazel.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DazelParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DazelParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DazelParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Game_objectContext game_object() {
			return GetRuleContext<Game_objectContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			game_object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Game_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Game_object_typeContext game_object_type() {
			return GetRuleContext<Game_object_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Game_object_contentsContext game_object_contents() {
			return GetRuleContext<Game_object_contentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public Game_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGame_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGame_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGame_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Game_objectContext game_object() {
		Game_objectContext _localctx = new Game_objectContext(Context, State);
		EnterRule(_localctx, 2, RULE_game_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			game_object_type();
			State = 49;
			Match(IDENTIFIER);
			State = 50;
			Match(L_BRACES);
			State = 51;
			game_object_contents();
			State = 52;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyContext : ParserRuleContext {
		public EmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyContext empty() {
		EmptyContext _localctx = new EmptyContext(Context, State);
		EnterRule(_localctx, 4, RULE_empty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Game_object_typeContext : ParserRuleContext {
		public Game_object_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game_object_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGame_object_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGame_object_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGame_object_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Game_object_typeContext game_object_type() {
		Game_object_typeContext _localctx = new Game_object_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_game_object_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Game_object_contentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Game_object_contentContext game_object_content() {
			return GetRuleContext<Game_object_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Game_object_contentsContext game_object_contents() {
			return GetRuleContext<Game_object_contentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext empty() {
			return GetRuleContext<EmptyContext>(0);
		}
		public Game_object_contentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game_object_contents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGame_object_contents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGame_object_contents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGame_object_contents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Game_object_contentsContext game_object_contents() {
		Game_object_contentsContext _localctx = new Game_object_contentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_game_object_contents);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				game_object_content();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				game_object_content();
				State = 60;
				game_object_contents();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Game_object_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Content_typeContext content_type() {
			return GetRuleContext<Content_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public Game_object_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game_object_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterGame_object_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitGame_object_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGame_object_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Game_object_contentContext game_object_content() {
		Game_object_contentContext _localctx = new Game_object_contentContext(Context, State);
		EnterRule(_localctx, 10, RULE_game_object_content);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			content_type();
			State = 66;
			Match(L_BRACES);
			State = 67;
			statement_list();
			State = 68;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Content_typeContext : ParserRuleContext {
		public Content_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterContent_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitContent_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Content_typeContext content_type() {
		Content_typeContext _localctx = new Content_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_content_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext empty() {
			return GetRuleContext<EmptyContext>(0);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement_list);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				statement();
				State = 73;
				Match(T__9);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				statement();
				State = 76;
				Match(T__9);
				State = 77;
				statement_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_loopContext repeat_loop() {
			return GetRuleContext<Repeat_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_invocationContext function_invocation() {
			return GetRuleContext<Function_invocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				repeat_loop();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				function_invocation();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 85;
				if_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public Repeat_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_loopContext repeat_loop() {
		Repeat_loopContext _localctx = new Repeat_loopContext(Context, State);
		EnterRule(_localctx, 18, RULE_repeat_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__10);
			State = 89;
			Match(L_BRACES);
			State = 90;
			statement_list();
			State = 91;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACES() { return GetToken(DazelParser.L_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACES() { return GetToken(DazelParser.R_BRACES, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__11);
			State = 94;
			expression();
			State = 95;
			Match(L_BRACES);
			State = 96;
			statement_list();
			State = 97;
			Match(R_BRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP() { return GetToken(DazelParser.ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(IDENTIFIER);
			State = 100;
			Match(ASSIGN_OP);
			State = 101;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sum_expressionContext sum_expression() {
			return GetRuleContext<Sum_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			sum_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sum_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Factor_expressionContext factor_expression() {
			return GetRuleContext<Factor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sum_expressionContext sum_expression() {
			return GetRuleContext<Sum_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sum_operationContext sum_operation() {
			return GetRuleContext<Sum_operationContext>(0);
		}
		public Sum_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sum_expressionContext sum_expression() {
		return sum_expression(0);
	}

	private Sum_expressionContext sum_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Sum_expressionContext _localctx = new Sum_expressionContext(Context, _parentState);
		Sum_expressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_sum_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 106;
			factor_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Sum_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sum_expression);
					State = 108;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 109;
					sum_operation();
					State = 110;
					factor_expression(0);
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Factor_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_expressionContext terminal_expression() {
			return GetRuleContext<Terminal_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Factor_expressionContext factor_expression() {
			return GetRuleContext<Factor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Factor_operationContext factor_operation() {
			return GetRuleContext<Factor_operationContext>(0);
		}
		public Factor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterFactor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitFactor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factor_expressionContext factor_expression() {
		return factor_expression(0);
	}

	private Factor_expressionContext factor_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Factor_expressionContext _localctx = new Factor_expressionContext(Context, _parentState);
		Factor_expressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_factor_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 118;
			terminal_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Factor_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor_expression);
					State = 120;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 121;
					factor_operation();
					State = 122;
					terminal_expression();
					}
					} 
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Terminal_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PARANTHESIS() { return GetToken(DazelParser.L_PARANTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PARANTHESIS() { return GetToken(DazelParser.R_PARANTHESIS, 0); }
		public Terminal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterTerminal_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitTerminal_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_expressionContext terminal_expression() {
		Terminal_expressionContext _localctx = new Terminal_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_terminal_expression);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case INT:
			case FLOAT:
			case L_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				value();
				}
				break;
			case L_PARANTHESIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				Match(L_PARANTHESIS);
				State = 131;
				expression();
				State = 132;
				Match(R_PARANTHESIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sum_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OP() { return GetToken(DazelParser.PLUS_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OP() { return GetToken(DazelParser.MINUS_OP, 0); }
		public Sum_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterSum_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitSum_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sum_operationContext sum_operation() {
		Sum_operationContext _localctx = new Sum_operationContext(Context, State);
		EnterRule(_localctx, 32, RULE_sum_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_OP || _la==MINUS_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factor_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATION_OP() { return GetToken(DazelParser.MULTIPLICATION_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION_OP() { return GetToken(DazelParser.DIVISION_OP, 0); }
		public Factor_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterFactor_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitFactor_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factor_operationContext factor_operation() {
		Factor_operationContext _localctx = new Factor_operationContext(Context, State);
		EnterRule(_localctx, 34, RULE_factor_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !(_la==MULTIPLICATION_OP || _la==DIVISION_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PARANTHESIS() { return GetToken(DazelParser.L_PARANTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext value_list() {
			return GetRuleContext<Value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PARANTHESIS() { return GetToken(DazelParser.R_PARANTHESIS, 0); }
		public Function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterFunction_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitFunction_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_invocationContext function_invocation() {
		Function_invocationContext _localctx = new Function_invocationContext(Context, State);
		EnterRule(_localctx, 36, RULE_function_invocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(IDENTIFIER);
			State = 141;
			Match(L_PARANTHESIS);
			State = 142;
			value_list();
			State = 143;
			Match(R_PARANTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(DazelParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DazelParser.IDENTIFIER, i);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 38, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(IDENTIFIER);
			State = 146;
			Match(T__12);
			State = 147;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext value_list() {
			return GetRuleContext<Value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext empty() {
			return GetRuleContext<EmptyContext>(0);
		}
		public Value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_listContext value_list() {
		Value_listContext _localctx = new Value_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_value_list);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				value();
				State = 151;
				Match(T__13);
				State = 152;
				value_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DazelParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(DazelParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(DazelParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_invocationContext function_invocation() {
			return GetRuleContext<Function_invocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_value);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159;
				Match(FLOAT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160;
				array();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 161;
				function_invocation();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 162;
				member_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(DazelParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext value_list() {
			return GetRuleContext<Value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(DazelParser.R_BRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDazelListener typedListener = listener as IDazelListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDazelVisitor<TResult> typedVisitor = visitor as IDazelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 44, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(L_BRACKET);
			State = 166;
			value_list();
			State = 167;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return sum_expression_sempred((Sum_expressionContext)_localctx, predIndex);
		case 14: return factor_expression_sempred((Factor_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sum_expression_sempred(Sum_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool factor_expression_sempred(Factor_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xAC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x42', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'S', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'Y', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 's', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', 'v', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x7F', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x82', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x89', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x9E', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xA6', '\n', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x2', 
		'\x4', '\x1C', '\x1E', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x2', '\x6', '\x3', '\x2', '\x3', 
		'\x5', '\x3', '\x2', '\x6', '\v', '\x3', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', ' ', '!', '\x2', '\xA5', '\x2', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x32', '\x3', '\x2', '\x2', '\x2', '\x6', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\b', ':', '\x3', '\x2', '\x2', '\x2', '\n', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x43', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x10', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'X', '\x3', '\x2', '\x2', '\x2', '\x14', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '_', '\x3', '\x2', '\x2', '\x2', '\x18', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'i', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x1E', 'w', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x88', '\x3', '\x2', '\x2', '\x2', '\"', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x8C', '\x3', '\x2', '\x2', '\x2', '&', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x93', '\x3', '\x2', '\x2', '\x2', '*', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xA5', '\x3', '\x2', '\x2', '\x2', '.', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x4', '\x3', '\x2', 
		'\x31', '\x3', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\b', 
		'\x5', '\x2', '\x33', '\x34', '\a', '\x12', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\x19', '\x2', '\x2', '\x35', '\x36', '\x5', '\n', '\x6', '\x2', 
		'\x36', '\x37', '\a', '\x1A', '\x2', '\x2', '\x37', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\a', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\t', '\x2', '\x2', '\x2', ';', 
		'\t', '\x3', '\x2', '\x2', '\x2', '<', '\x42', '\x5', '\f', '\a', '\x2', 
		'=', '>', '\x5', '\f', '\a', '\x2', '>', '?', '\x5', '\n', '\x6', '\x2', 
		'?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x5', '\x6', '\x4', 
		'\x2', '\x41', '<', '\x3', '\x2', '\x2', '\x2', '\x41', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\xE', '\b', '\x2', '\x44', 
		'\x45', '\a', '\x19', '\x2', '\x2', '\x45', '\x46', '\x5', '\x10', '\t', 
		'\x2', '\x46', 'G', '\a', '\x1A', '\x2', '\x2', 'G', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\t', '\x3', '\x2', '\x2', 'I', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x5', '\x12', '\n', '\x2', 'K', 'L', '\a', 
		'\f', '\x2', '\x2', 'L', 'S', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x5', 
		'\x12', '\n', '\x2', 'N', 'O', '\a', '\f', '\x2', '\x2', 'O', 'P', '\x5', 
		'\x10', '\t', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x5', 
		'\x6', '\x4', '\x2', 'R', 'J', '\x3', '\x2', '\x2', '\x2', 'R', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'T', 'Y', '\x5', '\x14', '\v', '\x2', 'U', 
		'Y', '\x5', '\x18', '\r', '\x2', 'V', 'Y', '\x5', '&', '\x14', '\x2', 
		'W', 'Y', '\x5', '\x16', '\f', '\x2', 'X', 'T', '\x3', '\x2', '\x2', '\x2', 
		'X', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '\r', '\x2', '\x2', '[', '\\', '\a', '\x19', '\x2', 
		'\x2', '\\', ']', '\x5', '\x10', '\t', '\x2', ']', '^', '\a', '\x1A', 
		'\x2', '\x2', '^', '\x15', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', 
		'\xE', '\x2', '\x2', '`', '\x61', '\x5', '\x1A', '\xE', '\x2', '\x61', 
		'\x62', '\a', '\x19', '\x2', '\x2', '\x62', '\x63', '\x5', '\x10', '\t', 
		'\x2', '\x63', '\x64', '\a', '\x1A', '\x2', '\x2', '\x64', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x12', '\x2', '\x2', '\x66', 
		'g', '\a', '\x1B', '\x2', '\x2', 'g', 'h', '\x5', '\x1A', '\xE', '\x2', 
		'h', '\x19', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x5', '\x1C', '\xF', 
		'\x2', 'j', '\x1B', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\b', '\xF', 
		'\x1', '\x2', 'l', 'm', '\x5', '\x1E', '\x10', '\x2', 'm', 't', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\f', '\x4', '\x2', '\x2', 'o', 'p', '\x5', 
		'\"', '\x12', '\x2', 'p', 'q', '\x5', '\x1E', '\x10', '\x2', 'q', 's', 
		'\x3', '\x2', '\x2', '\x2', 'r', 'n', '\x3', '\x2', '\x2', '\x2', 's', 
		'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\b', '\x10', '\x1', 
		'\x2', 'x', 'y', '\x5', ' ', '\x11', '\x2', 'y', '\x80', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\f', '\x4', '\x2', '\x2', '{', '|', '\x5', '$', 
		'\x13', '\x2', '|', '}', '\x5', ' ', '\x11', '\x2', '}', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '~', 'z', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x89', '\x5', 
		',', '\x17', '\x2', '\x84', '\x85', '\a', '\x15', '\x2', '\x2', '\x85', 
		'\x86', '\x5', '\x1A', '\xE', '\x2', '\x86', '\x87', '\a', '\x16', '\x2', 
		'\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x84', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\t', '\x4', '\x2', '\x2', 
		'\x8B', '#', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\t', '\x5', 
		'\x2', '\x2', '\x8D', '%', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\a', '\x12', '\x2', '\x2', '\x8F', '\x90', '\a', '\x15', '\x2', '\x2', 
		'\x90', '\x91', '\x5', '*', '\x16', '\x2', '\x91', '\x92', '\a', '\x16', 
		'\x2', '\x2', '\x92', '\'', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', 
		'\a', '\x12', '\x2', '\x2', '\x94', '\x95', '\a', '\xF', '\x2', '\x2', 
		'\x95', '\x96', '\a', '\x12', '\x2', '\x2', '\x96', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x9E', '\x5', ',', '\x17', '\x2', '\x98', '\x99', 
		'\x5', ',', '\x17', '\x2', '\x99', '\x9A', '\a', '\x10', '\x2', '\x2', 
		'\x9A', '\x9B', '\x5', '*', '\x16', '\x2', '\x9B', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9E', '\x5', '\x6', '\x4', '\x2', '\x9D', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA6', '\a', '\x12', '\x2', '\x2', '\xA0', '\xA6', 
		'\a', '\x13', '\x2', '\x2', '\xA1', '\xA6', '\a', '\x14', '\x2', '\x2', 
		'\xA2', '\xA6', '\x5', '.', '\x18', '\x2', '\xA3', '\xA6', '\x5', '&', 
		'\x14', '\x2', '\xA4', '\xA6', '\x5', '(', '\x15', '\x2', '\xA5', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '-', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x17', '\x2', '\x2', '\xA8', '\xA9', '\x5', '*', '\x16', 
		'\x2', '\xA9', '\xAA', '\a', '\x18', '\x2', '\x2', '\xAA', '/', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x41', 'R', 'X', 't', '\x80', '\x88', '\x9D', 
		'\xA5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
